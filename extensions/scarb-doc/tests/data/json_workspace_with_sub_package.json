{
  "format_version": 1,
  "packages_information": [
    {
      "crate_": {
        "root_module": {
          "item_data": {
            "name": "hello_world",
            "doc": "Fibonacci sequence calculator",
            "signature": null,
            "full_path": "hello_world",
            "group": null
          },
          "submodules": [
            {
              "item_data": {
                "name": "tests",
                "doc": "Tests module",
                "signature": null,
                "full_path": "hello_world::tests",
                "group": null
              },
              "submodules": [],
              "constants": [],
              "free_functions": [
                {
                  "item_data": {
                    "name": "it_works",
                    "doc": "Really\nworks.",
                    "signature": "fn it_works()",
                    "full_path": "hello_world::tests::it_works",
                    "group": null
                  }
                }
              ],
              "structs": [],
              "enums": [],
              "type_aliases": [],
              "impl_aliases": [],
              "traits": [],
              "impls": [],
              "extern_types": [],
              "extern_functions": [],
              "pub_uses": {
                "use_constants": [],
                "use_free_functions": [],
                "use_structs": [],
                "use_enums": [],
                "use_module_type_aliases": [],
                "use_impl_aliases": [],
                "use_traits": [],
                "use_impl_defs": [],
                "use_extern_types": [],
                "use_extern_functions": [],
                "use_submodules": [],
                "use_macro_declarations": []
              },
              "macro_declarations": []
            }
          ],
          "constants": [
            {
              "item_data": {
                "name": "FOO",
                "doc": "FOO constant with value 42",
                "signature": "const FOO: u32 = 42;",
                "full_path": "hello_world::FOO",
                "group": null
              }
            }
          ],
          "free_functions": [
            {
              "item_data": {
                "name": "main",
                "doc": "Main function that calculates the 16th Fibonacci number",
                "signature": "fn main() -> u32",
                "full_path": "hello_world::main",
                "group": null
              }
            },
            {
              "item_data": {
                "name": "fib",
                "doc": "Calculate the nth Fibonacci number\n# Arguments\n- `n` - The index of the Fibonacci number to calculate",
                "signature": "fn fib(mut n: u32) -> u32",
                "full_path": "hello_world::fib",
                "group": null
              }
            }
          ],
          "structs": [
            {
              "members": [
                {
                  "item_data": {
                    "name": "radius",
                    "doc": "Radius of the circle",
                    "signature": "radius: u32",
                    "full_path": "hello_world::Circle::radius",
                    "group": null
                  }
                }
              ],
              "item_data": {
                "name": "Circle",
                "doc": "Circle struct with radius field",
                "signature": "#[derive(Drop, Serde, PartialEq)]\nstruct Circle {\n    radius: u32,\n}",
                "full_path": "hello_world::Circle",
                "group": null
              }
            }
          ],
          "enums": [
            {
              "variants": [
                {
                  "item_data": {
                    "name": "Red",
                    "doc": "Red color",
                    "signature": "Red",
                    "full_path": "hello_world::Color::Red",
                    "group": null
                  }
                },
                {
                  "item_data": {
                    "name": "Green",
                    "doc": "Green color",
                    "signature": "Green",
                    "full_path": "hello_world::Color::Green",
                    "group": null
                  }
                },
                {
                  "item_data": {
                    "name": "Blue",
                    "doc": "Blue color",
                    "signature": "Blue",
                    "full_path": "hello_world::Color::Blue",
                    "group": null
                  }
                }
              ],
              "item_data": {
                "name": "Color",
                "doc": "Color enum with Red, Green, and Blue variants",
                "signature": "enum Color {\n    Red,\n    Green,\n    Blue,\n}",
                "full_path": "hello_world::Color",
                "group": null
              }
            }
          ],
          "type_aliases": [
            {
              "item_data": {
                "name": "Pair",
                "doc": "Pair type alias for a tuple of two u32 values",
                "signature": "type Pair = (u32, u32);",
                "full_path": "hello_world::Pair",
                "group": null
              }
            }
          ],
          "impl_aliases": [],
          "traits": [
            {
              "trait_constants": [
                {
                  "item_data": {
                    "name": "SHAPE_CONST",
                    "doc": "Constant for the shape type",
                    "signature": "const SHAPE_CONST: felt252;",
                    "full_path": "hello_world::Shape::SHAPE_CONST",
                    "group": null
                  }
                }
              ],
              "trait_types": [
                {
                  "item_data": {
                    "name": "ShapePair",
                    "doc": "Type alias for a pair of shapes",
                    "signature": "type ShapePair;",
                    "full_path": "hello_world::Shape::ShapePair",
                    "group": null
                  }
                }
              ],
              "trait_functions": [
                {
                  "item_data": {
                    "name": "area",
                    "doc": "Calculate the area of the shape",
                    "signature": "fn area(self: T) -> u32",
                    "full_path": "hello_world::Shape::area",
                    "group": null
                  }
                }
              ],
              "item_data": {
                "name": "Shape",
                "doc": "Shape trait for objects that have an area",
                "signature": "trait Shape<T>",
                "full_path": "hello_world::Shape",
                "group": null
              }
            }
          ],
          "impls": [
            {
              "impl_types": [
                {
                  "item_data": {
                    "name": "ShapePair",
                    "doc": "Type alias for a pair of circles",
                    "signature": "type ShapePair = (Circle, Circle);",
                    "full_path": "hello_world::CircleShape::ShapePair",
                    "group": null
                  }
                }
              ],
              "impl_constants": [
                {
                  "item_data": {
                    "name": "SHAPE_CONST",
                    "doc": "Shape constant",
                    "signature": "const SHAPE_CONST: felt252 = 'xyz';",
                    "full_path": "hello_world::CircleShape::SHAPE_CONST",
                    "group": null
                  }
                }
              ],
              "impl_functions": [
                {
                  "item_data": {
                    "name": "area",
                    "doc": "Implementation of the area method for Circle",
                    "signature": "fn area(self: Circle) -> u32",
                    "full_path": "hello_world::CircleShape::area",
                    "group": null
                  }
                }
              ],
              "item_data": {
                "name": "CircleShape",
                "doc": "Implementation of the Shape trait for Circle",
                "signature": "impl CircleShape of Shape<Circle>;",
                "full_path": "hello_world::CircleShape",
                "group": null
              }
            },
            {
              "impl_types": [],
              "impl_constants": [],
              "impl_functions": [],
              "item_data": {
                "name": "CircleDrop",
                "doc": null,
                "signature": "impl CircleDrop of Drop<Circle>;",
                "full_path": "hello_world::CircleDrop",
                "group": null
              }
            },
            {
              "impl_types": [],
              "impl_constants": [],
              "impl_functions": [
                {
                  "item_data": {
                    "name": "serialize",
                    "doc": null,
                    "signature": "fn serialize(self: Circle, ref output: Array<felt252>)",
                    "full_path": "hello_world::CircleSerde::serialize",
                    "group": null
                  }
                },
                {
                  "item_data": {
                    "name": "deserialize",
                    "doc": null,
                    "signature": "fn deserialize(ref serialized: Span<felt252>) -> Option<Circle>",
                    "full_path": "hello_world::CircleSerde::deserialize",
                    "group": null
                  }
                }
              ],
              "item_data": {
                "name": "CircleSerde",
                "doc": null,
                "signature": "impl CircleSerde of Serde<Circle>;",
                "full_path": "hello_world::CircleSerde",
                "group": null
              }
            },
            {
              "impl_types": [],
              "impl_constants": [],
              "impl_functions": [
                {
                  "item_data": {
                    "name": "eq",
                    "doc": null,
                    "signature": "fn eq(lhs: Circle, rhs: Circle) -> bool",
                    "full_path": "hello_world::CirclePartialEq::eq",
                    "group": null
                  }
                }
              ],
              "item_data": {
                "name": "CirclePartialEq",
                "doc": null,
                "signature": "impl CirclePartialEq of PartialEq<Circle>;",
                "full_path": "hello_world::CirclePartialEq",
                "group": null
              }
            }
          ],
          "extern_types": [],
          "extern_functions": [],
          "pub_uses": {
            "use_constants": [],
            "use_free_functions": [],
            "use_structs": [],
            "use_enums": [],
            "use_module_type_aliases": [],
            "use_impl_aliases": [],
            "use_traits": [],
            "use_impl_defs": [],
            "use_extern_types": [],
            "use_extern_functions": [],
            "use_submodules": [],
            "use_macro_declarations": []
          },
          "macro_declarations": []
        },
        "groups": []
      },
      "metadata": {
        "name": "hello_world",
        "authors": null
      }
    },
    {
      "crate_": {
        "root_module": {
          "item_data": {
            "name": "hello_world_sub_package",
            "doc": "Sub-package code (without feature)",
            "signature": null,
            "full_path": "hello_world_sub_package",
            "group": null
          },
          "submodules": [],
          "constants": [],
          "free_functions": [
            {
              "item_data": {
                "name": "test",
                "doc": "Function that prints \"test\" to stdout with endline.\nCan invoke it like that:\n```cairo\n    fn main() {\n        test();\n    }\n```",
                "signature": "fn test()",
                "full_path": "hello_world_sub_package::test",
                "group": null
              }
            },
            {
              "item_data": {
                "name": "main",
                "doc": "Main function that cairo runs as a binary entrypoint.",
                "signature": "fn main()",
                "full_path": "hello_world_sub_package::main",
                "group": null
              }
            }
          ],
          "structs": [],
          "enums": [],
          "type_aliases": [],
          "impl_aliases": [],
          "traits": [],
          "impls": [],
          "extern_types": [],
          "extern_functions": [],
          "pub_uses": {
            "use_constants": [],
            "use_free_functions": [],
            "use_structs": [],
            "use_enums": [],
            "use_module_type_aliases": [],
            "use_impl_aliases": [],
            "use_traits": [],
            "use_impl_defs": [],
            "use_extern_types": [],
            "use_extern_functions": [],
            "use_submodules": [],
            "use_macro_declarations": []
          },
          "macro_declarations": []
        },
        "groups": []
      },
      "metadata": {
        "name": "hello_world_sub_package",
        "authors": null
      }
    }
  ]
}
