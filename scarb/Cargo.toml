[package]
name = "scarb"
version.workspace = true
edition.workspace = true
publish = false

authors.workspace = true
categories = ["command-line-utilities", "development-tools"]
description = "The Cairo package manager"
homepage.workspace = true
keywords = ["cairo-lang", "starknet", "scarb"]
license.workspace = true
readme.workspace = true
repository.workspace = true

[dependencies]
anyhow.workspace = true
async-trait.workspace = true
cairo-lang-compiler.workspace = true
cairo-lang-defs.workspace = true
cairo-lang-diagnostics.workspace = true
cairo-lang-executable.workspace = true
cairo-lang-filesystem.workspace = true
cairo-lang-formatter.workspace = true
cairo-lang-lowering.workspace = true
cairo-lang-macro = { path = "../plugins/cairo-lang-macro" }
cairo-lang-macro-stable = { path = "../plugins/cairo-lang-macro-stable" }
cairo-lang-macro-v1.workspace = true
cairo-lang-macro-stable-v1 = { version = "1", package = "cairo-lang-macro-stable" }
cairo-lang-parser.workspace = true
cairo-lang-semantic.workspace = true
cairo-lang-sierra-generator.workspace = true
cairo-lang-sierra-to-casm.workspace = true
cairo-lang-sierra.workspace = true
cairo-lang-starknet-classes.workspace = true
cairo-lang-starknet.workspace = true
cairo-lang-syntax.workspace = true
cairo-lang-test-plugin.workspace = true
cairo-lang-utils.workspace = true
cairo-lint = { workspace = true, optional = true }
camino.workspace = true
clap.workspace = true
convert_case.workspace = true
create-output-dir = { path = "../utils/create-output-dir" }
crossbeam-channel = "0.5.14"
data-encoding.workspace = true
deno_task_shell.workspace = true
derive_builder.workspace = true
dialoguer.workspace = true
directories.workspace = true
dunce.workspace = true
fs4.workspace = true
futures.workspace = true
gix.workspace = true
gix-path.workspace = true
glob.workspace = true
ignore.workspace = true
include_dir.workspace = true
indoc.workspace = true
itertools.workspace = true
libloading.workspace = true
once_cell.workspace = true
once_map = { path = "../utils/once-map" }
pathdiff.workspace = true
petgraph.workspace = true
pubgrub.workspace = true
scarb-proc-macro-server-types = { path = "../utils/scarb-proc-macro-server-types" }
ra_ap_toolchain.workspace = true
redb.workspace = true
reqwest.workspace = true
scarb-build-metadata = { path = "../utils/scarb-build-metadata" }
scarb-metadata = { path = "../scarb-metadata", default-features = false, features = ["builder"] }
scarb-stable-hash = { path = "../utils/scarb-stable-hash" }
scarb-ui = { path = "../utils/scarb-ui" }
semver-pubgrub.workspace = true
semver.workspace = true
serde-untagged.workspace = true
serde-value.workspace = true
serde.workspace = true
serde_json.workspace = true
serde_repr.workspace = true
sha2.workspace = true
smallvec.workspace = true
smol_str.workspace = true
tar.workspace = true
thiserror.workspace = true
tokio.workspace = true
tokio-stream.workspace = true
toml.workspace = true
toml_edit.workspace = true
tracing-subscriber.workspace = true
tracing.workspace = true
typed-builder.workspace = true
url.workspace = true
walkdir.workspace = true
which.workspace = true
windows-sys.workspace = true
zstd.workspace = true
cargo_metadata.workspace = true
flate2.workspace = true
target-triple.workspace = true

[target.'cfg(not(target_os = "linux"))'.dependencies]
reqwest = { workspace = true, default-features = true }

[target.'cfg(target_os = "linux")'.dependencies]
reqwest = { workspace = true, features = ["rustls-tls-native-roots"] }

[dev-dependencies]
assert_fs.workspace = true
expect-test.workspace = true
fs_extra.workspace = true
io_tee.workspace = true
libc.workspace = true
ntest.workspace = true
predicates.workspace = true
scarb-test-support = { path = "../utils/scarb-test-support" }
serde_test.workspace = true
similar-asserts.workspace = true
snapbox.workspace = true
test-case.workspace = true
test-for-each-example = { path = "../utils/test-for-each-example" }
cairo-lint = { workspace = true }

[build-dependencies]
fs_extra.workspace = true
scarb-build-metadata = { path = "../utils/scarb-build-metadata" }
toml.workspace = true
zip.workspace = true

[features]
default = ["scarb-lint"]
scarb-lint = ["dep:cairo-lint"]
